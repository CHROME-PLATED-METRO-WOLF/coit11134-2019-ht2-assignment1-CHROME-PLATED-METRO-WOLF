
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.concurrent.Callable;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Terry
 */
public class ProgramManagerForm extends javax.swing.JFrame {
 private ArrayList<Building> buildings = new ArrayList<Building>();
    private ArrayList<Installation> installations = new ArrayList<Installation>();
    private ArrayList<Technician> technicians = new ArrayList<Technician>();
    /**
     * Creates new form ProgramManagerForm
     */
    public ProgramManagerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bWatchDogStatusTxt = new javax.swing.JTextField();
        tWatchDogStatusTxt = new javax.swing.JTextField();
        iWatchDogStatusTxt = new javax.swing.JTextField();
        getStatusBtn = new javax.swing.JButton();
        killBuildingWDBtn = new javax.swing.JButton();
        suspendBuildingWatchDogBtn = new javax.swing.JButton();
        buildingStartBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        commandOutputTxt = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        buildingPriorityBox = new javax.swing.JComboBox<>();
        buildingStartDaemonBtn = new javax.swing.JButton();
        killTechnicianWDBtn1 = new javax.swing.JButton();
        suspendTechnicianWatchDogBtn1 = new javax.swing.JButton();
        technicianStartBtn1 = new javax.swing.JButton();
        technicianStartDaemonBtn1 = new javax.swing.JButton();
        technicianPriorityBox1 = new javax.swing.JComboBox<>();
        killInstallationsWDBtn2 = new javax.swing.JButton();
        suspendInstallationsWatchDogBtn2 = new javax.swing.JButton();
        installationsStartBtn2 = new javax.swing.JButton();
        installationsStartDaemonBtn2 = new javax.swing.JButton();
        installationsPriorityBox2 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        buildingsSaveBtn = new javax.swing.JButton();
        buildingsLoadBtn = new javax.swing.JButton();
        technicianSaveBtn = new javax.swing.JButton();
        technicianLoadBtn = new javax.swing.JButton();
        installationSaveBtn = new javax.swing.JButton();
        installationLoadBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Program Manager and Admin Panel");

        jLabel2.setText("Building watchdog thread");

        jLabel3.setText("Technician watchdog thread");

        jLabel4.setText("Installation watchdog thread");

        jLabel5.setText("Status");

        jLabel6.setText("Status");

        jLabel7.setText("Status");

        getStatusBtn.setText("Get");
        getStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStatusBtnActionPerformed(evt);
            }
        });

        killBuildingWDBtn.setText("Stop");
        killBuildingWDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killBuildingWDBtnActionPerformed(evt);
            }
        });

        suspendBuildingWatchDogBtn.setText("Suspend");
        suspendBuildingWatchDogBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspendBuildingWatchDogBtnActionPerformed(evt);
            }
        });

        buildingStartBtn.setText("Start");
        buildingStartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingStartBtnActionPerformed(evt);
            }
        });

        commandOutputTxt.setColumns(20);
        commandOutputTxt.setRows(5);
        jScrollPane1.setViewportView(commandOutputTxt);

        jLabel8.setText("Command OutPut");

        buildingPriorityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Priority 1", "Priority 2", "Priority 3", "Priority 4", "Priority 5", "Priority 6", "Priority 7", "Priority 8", "Priority 9", "Priority 10" }));
        buildingPriorityBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                buildingPriorityBoxItemStateChanged(evt);
            }
        });

        buildingStartDaemonBtn.setText("Start Daemon");
        buildingStartDaemonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingStartDaemonBtnActionPerformed(evt);
            }
        });

        killTechnicianWDBtn1.setText("Stop");
        killTechnicianWDBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killTechnicianWDBtn1ActionPerformed(evt);
            }
        });

        suspendTechnicianWatchDogBtn1.setText("Suspend");
        suspendTechnicianWatchDogBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspendTechnicianWatchDogBtn1ActionPerformed(evt);
            }
        });

        technicianStartBtn1.setText("Start");
        technicianStartBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicianStartBtn1ActionPerformed(evt);
            }
        });

        technicianStartDaemonBtn1.setText("Start Daemon");
        technicianStartDaemonBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicianStartDaemonBtn1ActionPerformed(evt);
            }
        });

        technicianPriorityBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Priority 1", "Priority 2", "Priority 3", "Priority 4", "Priority 5", "Priority 6", "Priority 7", "Priority 8", "Priority 9", "Priority 10" }));
        technicianPriorityBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                technicianPriorityBox1ItemStateChanged(evt);
            }
        });

        killInstallationsWDBtn2.setText("Stop");
        killInstallationsWDBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killInstallationsWDBtn2ActionPerformed(evt);
            }
        });

        suspendInstallationsWatchDogBtn2.setText("Suspend");
        suspendInstallationsWatchDogBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suspendInstallationsWatchDogBtn2ActionPerformed(evt);
            }
        });

        installationsStartBtn2.setText("Start");
        installationsStartBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installationsStartBtn2ActionPerformed(evt);
            }
        });

        installationsStartDaemonBtn2.setText("Start Daemon");
        installationsStartDaemonBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installationsStartDaemonBtn2ActionPerformed(evt);
            }
        });

        installationsPriorityBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Priority 1", "Priority 2", "Priority 3", "Priority 4", "Priority 5", "Priority 6", "Priority 7", "Priority 8", "Priority 9", "Priority 10" }));
        installationsPriorityBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                installationsPriorityBox2ItemStateChanged(evt);
            }
        });

        jLabel9.setText("Building");

        jLabel10.setText("Technician");

        jLabel11.setText("Installation");

        buildingsSaveBtn.setText("Save");
        buildingsSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingsSaveBtnActionPerformed(evt);
            }
        });

        buildingsLoadBtn.setText("Load");
        buildingsLoadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingsLoadBtnActionPerformed(evt);
            }
        });

        technicianSaveBtn.setText("Save");
        technicianSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicianSaveBtnActionPerformed(evt);
            }
        });

        technicianLoadBtn.setText("Load");
        technicianLoadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                technicianLoadBtnActionPerformed(evt);
            }
        });

        installationSaveBtn.setText("Save");
        installationSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installationSaveBtnActionPerformed(evt);
            }
        });

        installationLoadBtn.setText("Load");
        installationLoadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installationLoadBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Load All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(325, 325, 325)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(383, 383, 383)
                        .addComponent(getStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(28, 28, 28)
                                .addComponent(buildingsSaveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buildingsLoadBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(technicianSaveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(technicianLoadBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(installationSaveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(installationLoadBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bWatchDogStatusTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(tWatchDogStatusTxt)
                                    .addComponent(iWatchDogStatusTxt))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(killBuildingWDBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(suspendBuildingWatchDogBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buildingStartBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buildingStartDaemonBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buildingPriorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(killTechnicianWDBtn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(suspendTechnicianWatchDogBtn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(technicianStartBtn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(technicianStartDaemonBtn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(technicianPriorityBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(killInstallationsWDBtn2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(suspendInstallationsWatchDogBtn2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(installationsStartBtn2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(installationsStartDaemonBtn2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(installationsPriorityBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(402, 402, 402))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getStatusBtn)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(bWatchDogStatusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(killBuildingWDBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suspendBuildingWatchDogBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildingStartBtn)
                    .addComponent(buildingPriorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildingStartDaemonBtn))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(tWatchDogStatusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(killTechnicianWDBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suspendTechnicianWatchDogBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(technicianStartBtn1)
                    .addComponent(technicianPriorityBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(technicianStartDaemonBtn1))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(iWatchDogStatusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(killInstallationsWDBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(suspendInstallationsWatchDogBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(installationsStartBtn2)
                    .addComponent(installationsPriorityBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(installationsStartDaemonBtn2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(buildingsSaveBtn)
                    .addComponent(buildingsLoadBtn)
                    .addComponent(jLabel10)
                    .addComponent(technicianSaveBtn)
                    .addComponent(technicianLoadBtn)
                    .addComponent(jLabel11)
                    .addComponent(installationSaveBtn)
                    .addComponent(installationLoadBtn)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStatusBtnActionPerformed
        Thread buildingThread = getThread("Building Watch Dog");
        Thread installationThread = getThread("Installations Watch Dog");
        Thread technicianThread = getThread("Technicians Watch Dog");
        if (buildingThread == null) {
            bWatchDogStatusTxt.setText("Not Running");
        } else {
            bWatchDogStatusTxt.setText(buildingThread.getState().toString());
            System.out.println("Building thread is priority: " + buildingThread.getPriority());
            buildingPriorityBox.setSelectedIndex(buildingThread.getPriority() - 1);
        }
        if (installationThread == null) {
            iWatchDogStatusTxt.setText("Not Running");
        } else {
            iWatchDogStatusTxt.setText(installationThread.getState().toString());
            System.out.println("Installation thread is priority: " + installationThread.getPriority());
            installationsPriorityBox2.setSelectedIndex(installationThread.getPriority() - 1);
        }
        if (technicianThread == null) {
            tWatchDogStatusTxt.setText("Not Running");
        } else {
            tWatchDogStatusTxt.setText(technicianThread.getState().toString());
            System.out.println("Technician thread is priority: " + technicianThread.getPriority());
            technicianPriorityBox1.setSelectedIndex(technicianThread.getPriority() - 1);
        }


    }//GEN-LAST:event_getStatusBtnActionPerformed

    private void killBuildingWDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killBuildingWDBtnActionPerformed
        //get the watch dog thread
        Thread thread = getThread("Building Watch Dog");
        if (thread == null) {

        } else {
            //cast that thread into a watchdog object so we can call its methods
            ModifyBuilding.WatchDog watchdog = (ModifyBuilding.WatchDog) thread;
            //call the stoprunning method to safely kill the thread
            watchdog.stopRunning();
            commandOutputTxt.append("\n stopped thread: " + thread.getId() + " " + thread.getName());
        }


    }//GEN-LAST:event_killBuildingWDBtnActionPerformed

    private void suspendBuildingWatchDogBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspendBuildingWatchDogBtnActionPerformed
        //get the watch dog thread
        Thread thread = getThread("Building Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n no building watch dog running");
        } else {
            try {
                thread.wait();
            } catch (Exception e) {
                commandOutputTxt.append("\n ERROR: could not suspend thread: \n" + e);
            }

        }

    }//GEN-LAST:event_suspendBuildingWatchDogBtnActionPerformed

    private void buildingStartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingStartBtnActionPerformed
        if (getThread("Building Watch Dog") == null) {
            ModifyBuilding x = new ModifyBuilding();
            ModifyBuilding.WatchDog watchdog = x.new WatchDog();
            watchdog.setDaemon(false);
            //setting its name
            watchdog.setName("Building Watch Dog");
            watchdog.start();
            commandOutputTxt.append("\n new building watchdog thread started");
        } else {
            commandOutputTxt.append("\n Building watch dog all ready running");
        }
    }//GEN-LAST:event_buildingStartBtnActionPerformed

    private void buildingPriorityBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_buildingPriorityBoxItemStateChanged
        Thread thread = getThread("Building Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n building thread not running");
        } else {
            System.out.println("Building priority changed");
            commandOutputTxt.append("\n Building priority changed");

            thread.setPriority(buildingPriorityBox.getSelectedIndex() + 1);
            System.out.println("Building thread is now priority: " + thread.getPriority());
            commandOutputTxt.append("\n Building thread is now priority:" + thread.getPriority());
        }


    }//GEN-LAST:event_buildingPriorityBoxItemStateChanged


    private void buildingStartDaemonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingStartDaemonBtnActionPerformed
        Thread thread = getThread("Building Watch Dog");
        if (thread == null) {
            ModifyBuilding x = new ModifyBuilding();
            ModifyBuilding.WatchDog watchdog = x.new WatchDog();
            watchdog.setName("Building Watch Dog");

            System.out.println("Setting building thread to daemon");
            commandOutputTxt.append("\n Setting building thread to daemon");
            //setting its name
            watchdog.setDaemon(true);

            commandOutputTxt.append("\n starting Building watchdog");
            watchdog.start();
        } else {
            System.out.println("error thread is allready running");
            commandOutputTxt.append("\n error thread is allready running");
        }
    }//GEN-LAST:event_buildingStartDaemonBtnActionPerformed

    private void killTechnicianWDBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killTechnicianWDBtn1ActionPerformed
        //get the watch dog thread
        Thread thread = getThread("Technicians Watch Dog");
        if (thread == null) {

        } else {
            //cast that thread into a watchdog object so we can call its methods
            ModifyTechnician.WatchDog watchdog = (ModifyTechnician.WatchDog) thread;
            //call the stoprunning method to safely kill the thread
            watchdog.stopRunning();
            commandOutputTxt.append("\n stopped thread: " + thread.getId() + " " + thread.getName());
        }

    }//GEN-LAST:event_killTechnicianWDBtn1ActionPerformed

    private void suspendTechnicianWatchDogBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspendTechnicianWatchDogBtn1ActionPerformed
        //get the watch dog thread
        Thread thread = getThread("Technicians Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n no building watch dog running");
        } else {
            try {
                thread.wait();
            } catch (Exception e) {
                commandOutputTxt.append("\n ERROR: could not suspend thread: \n" + e);
            }

        }

    }//GEN-LAST:event_suspendTechnicianWatchDogBtn1ActionPerformed

    private void technicianStartBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicianStartBtn1ActionPerformed
        if (getThread("Technicians Watch Dog") == null) {
            ModifyTechnician x = new ModifyTechnician();
            ModifyTechnician.WatchDog watchdog = x.new WatchDog();
            watchdog.setDaemon(false);
            //setting its name
            watchdog.setName("Technicians Watch Dog");
            watchdog.start();
            commandOutputTxt.append("\n new technicians watchdog thread started");
        } else {
            commandOutputTxt.append("\n Technicians watch dog all ready running");
        }
    }//GEN-LAST:event_technicianStartBtn1ActionPerformed

    private void technicianStartDaemonBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicianStartDaemonBtn1ActionPerformed
        Thread thread = getThread("Technicians Watch Dog");
        if (thread == null) {
            ModifyBuilding x = new ModifyBuilding();
            ModifyBuilding.WatchDog watchdog = x.new WatchDog();
            watchdog.setName("Technicians Watch Dog");

            System.out.println("Setting technician thread to daemon");
            commandOutputTxt.append("\n Setting technician thread to daemon");
            //setting its name
            watchdog.setDaemon(true);

            commandOutputTxt.append("\n starting technician watchdog");
            watchdog.start();
        } else {
            System.out.println("error thread is allready running");
            commandOutputTxt.append("\n error thread is allready running");
        }
    }//GEN-LAST:event_technicianStartDaemonBtn1ActionPerformed

    private void technicianPriorityBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_technicianPriorityBox1ItemStateChanged
        Thread thread = getThread("Technicians Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n technician thread not running");
        } else {
            System.out.println("Technician priority changed");
            commandOutputTxt.append("\n Technicians priority changed");

            thread.setPriority(technicianPriorityBox1.getSelectedIndex() + 1);
            System.out.println("Technicians thread is now priority: " + thread.getPriority());
            commandOutputTxt.append("\n Technicians thread is now priority:" + thread.getPriority());
        }
    }//GEN-LAST:event_technicianPriorityBox1ItemStateChanged

    private void killInstallationsWDBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killInstallationsWDBtn2ActionPerformed
          //get the watch dog thread
        Thread thread = getThread("Installations Watch Dog");
        if (thread == null) {

        } else {
            //cast that thread into a watchdog object so we can call its methods
            ModifyInstallations.WatchDog watchdog = (ModifyInstallations.WatchDog) thread;
            //call the stoprunning method to safely kill the thread
            watchdog.stopRunning();
            commandOutputTxt.append("\n stopped thread: " + thread.getId() + " " + thread.getName());
        }

    }//GEN-LAST:event_killInstallationsWDBtn2ActionPerformed

    private void suspendInstallationsWatchDogBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suspendInstallationsWatchDogBtn2ActionPerformed
        //get the watch dog thread
        Thread thread = getThread("Installations Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n no Installations watch dog running");
        } else {
            try {
                thread.wait();
            } catch (Exception e) {
                commandOutputTxt.append("\n ERROR: could not suspend thread: \n" + e);
            }

        }
    }//GEN-LAST:event_suspendInstallationsWatchDogBtn2ActionPerformed

    private void installationsStartBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installationsStartBtn2ActionPerformed
         if (getThread("Installations Watch Dog") == null) {
            ModifyInstallations x = new ModifyInstallations();
            ModifyInstallations.WatchDog watchdog = x.new WatchDog();
            watchdog.setDaemon(false);
            //setting its name
            watchdog.setName("Installations Watch Dog");
            watchdog.start();
            commandOutputTxt.append("\n new Installations watchdog thread started");
        } else {
            commandOutputTxt.append("\n Installations watch dog all ready running");
        }
    }//GEN-LAST:event_installationsStartBtn2ActionPerformed

    private void installationsStartDaemonBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installationsStartDaemonBtn2ActionPerformed
        Thread thread = getThread("Installations Watch Dog");
        if (thread == null) {
            ModifyInstallations x = new ModifyInstallations();
            ModifyInstallations.WatchDog watchdog = x.new WatchDog();
            watchdog.setName("Installations Watch Dog");

            System.out.println("Setting Installations thread to daemon");
            commandOutputTxt.append("\n Setting Installations thread to daemon");
            //setting its name
            watchdog.setDaemon(true);

            commandOutputTxt.append("\n starting Installations watchdog");
            watchdog.start();
        } else {
            System.out.println("error thread is allready running");
            commandOutputTxt.append("\n error thread is allready running");
        }
    }//GEN-LAST:event_installationsStartDaemonBtn2ActionPerformed

    private void installationsPriorityBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_installationsPriorityBox2ItemStateChanged
        Thread thread = getThread("Installations Watch Dog");
        if (thread == null) {
            commandOutputTxt.append("\n Installations thread not running");
        } else {
            System.out.println("Installations priority changed");
            commandOutputTxt.append("\n Installations priority changed");

            thread.setPriority(installationsPriorityBox2.getSelectedIndex() + 1);
            System.out.println("Installations thread is now priority: " + thread.getPriority());
            commandOutputTxt.append("\n Installations thread is now priority:" + thread.getPriority());
        }
    }//GEN-LAST:event_installationsPriorityBox2ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        commandOutputTxt.append("\n Loading All");
        MenuForm.loadAll();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        commandOutputTxt.append("\n Saving ALL");
        MenuForm.saveAll();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buildingsSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingsSaveBtnActionPerformed
       commandOutputTxt.append("\n Saving buildings");
        MenuForm.saveBuildingsText();
    }//GEN-LAST:event_buildingsSaveBtnActionPerformed

    private void buildingsLoadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingsLoadBtnActionPerformed
       commandOutputTxt.append("\n Loading buildings");
        MenuForm.loadBuildingsText();
    }//GEN-LAST:event_buildingsLoadBtnActionPerformed

    private void technicianSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicianSaveBtnActionPerformed
        commandOutputTxt.append("\n Saving technicians");
        MenuForm.saveTechniciansText();
    }//GEN-LAST:event_technicianSaveBtnActionPerformed

    private void technicianLoadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_technicianLoadBtnActionPerformed
        commandOutputTxt.append("\n Loading technicians");
        MenuForm.loadTechniciansText();
    }//GEN-LAST:event_technicianLoadBtnActionPerformed

    private void installationSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installationSaveBtnActionPerformed
        commandOutputTxt.append("\n Saving installations");
        MenuForm.saveInstallationsText();
    }//GEN-LAST:event_installationSaveBtnActionPerformed

    private void installationLoadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installationLoadBtnActionPerformed
        commandOutputTxt.append("\n Loading installations");
        MenuForm.loadInstallationsText();
    }//GEN-LAST:event_installationLoadBtnActionPerformed

    public Thread getThread(String threadName) {
        //gets the curent thred (gui thread)
        Thread currentThread = Thread.currentThread();
        //gets the group the gui belongs to which should be the main group
        ThreadGroup threadGroup = getRootThreadGroup(currentThread);
        //gets number of active threads
        int allActiveThreads = threadGroup.activeCount();
        //creats an array of all the threads in the thread group
        Thread[] allThreads = new Thread[allActiveThreads];
        //enumerate through all thread groups and add the threads to the list
        threadGroup.enumerate(allThreads);
        //loop through this list
        for (int i = 0; i < allThreads.length; i++) {
            //if the threads name matches then
            if (allThreads[i].getName().equals(threadName)) {
                System.out.println("Thread found");
                //return that thread
                return allThreads[i];
            }
        }
        System.out.println("Thread not found");
        //if thread is not found return null
        return null;
    }

    public Thread getThread(long threadID) {
        //gets the curent thred (gui thread)
        Thread currentThread = Thread.currentThread();
        //gets the group the gui belongs to which should be the main group
        ThreadGroup threadGroup = getRootThreadGroup(currentThread);
        //gets number of active threads
        int allActiveThreads = threadGroup.activeCount();
        //creats an array of all the threads in the thread group
        Thread[] allThreads = new Thread[allActiveThreads];
        //enumerate through all thread groups and add the threads to the list
        threadGroup.enumerate(allThreads);
        //loop through this list
        for (int i = 0; i < allThreads.length; i++) {
            //if the threads id matches then
            if (allThreads[i].getId() == threadID) {
                System.out.println("Thread found");
                //return that thread
                return allThreads[i];
            }
        }
        System.out.println("Thread not found");
        //if thread is not found return null
        return null;
    }

    private static ThreadGroup getRootThreadGroup(Thread thread) {
        ThreadGroup rootGroup = thread.getThreadGroup();
        while (true) {
            ThreadGroup parentGroup = rootGroup.getParent();
            if (parentGroup == null) {
                break;
            }
            rootGroup = parentGroup;
        }
        return rootGroup;
    }

    /**
     * @param args the command line arguments
     */
    public void main(ArrayList<Building> buildingsList, ArrayList<Installation> installationList, ArrayList<Technician> technicianList) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProgramManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProgramManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProgramManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProgramManagerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        buildings = buildingsList;
        installations = installationList;
        technicians = technicianList;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProgramManagerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bWatchDogStatusTxt;
    private javax.swing.JComboBox<String> buildingPriorityBox;
    private javax.swing.JButton buildingStartBtn;
    private javax.swing.JButton buildingStartDaemonBtn;
    private javax.swing.JButton buildingsLoadBtn;
    private javax.swing.JButton buildingsSaveBtn;
    private javax.swing.JTextArea commandOutputTxt;
    private javax.swing.JButton getStatusBtn;
    private javax.swing.JTextField iWatchDogStatusTxt;
    private javax.swing.JButton installationLoadBtn;
    private javax.swing.JButton installationSaveBtn;
    private javax.swing.JComboBox<String> installationsPriorityBox2;
    private javax.swing.JButton installationsStartBtn2;
    private javax.swing.JButton installationsStartDaemonBtn2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton killBuildingWDBtn;
    private javax.swing.JButton killInstallationsWDBtn2;
    private javax.swing.JButton killTechnicianWDBtn1;
    private javax.swing.JButton suspendBuildingWatchDogBtn;
    private javax.swing.JButton suspendInstallationsWatchDogBtn2;
    private javax.swing.JButton suspendTechnicianWatchDogBtn1;
    private javax.swing.JTextField tWatchDogStatusTxt;
    private javax.swing.JButton technicianLoadBtn;
    private javax.swing.JComboBox<String> technicianPriorityBox1;
    private javax.swing.JButton technicianSaveBtn;
    private javax.swing.JButton technicianStartBtn1;
    private javax.swing.JButton technicianStartDaemonBtn1;
    // End of variables declaration//GEN-END:variables
}
