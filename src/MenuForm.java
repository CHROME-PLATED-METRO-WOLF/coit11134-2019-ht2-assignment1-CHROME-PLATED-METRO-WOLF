/*
 Created by Caleb Davidson for assignment 2 of Object Oriented Programming
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class MenuForm extends javax.swing.JFrame {

    //the 3 arrays which store technicians, buildings, installations
    //Set as static so they can be accessed by other forms with having to pass
    //references
    private static ArrayList<Technician> technicians = new ArrayList<Technician>();
    private static ArrayList<Building> buildings = new ArrayList<Building>();
    private static ArrayList<Installation> installations = new ArrayList<Installation>();

    /**
     * Creates new form MenuForm
     */
    public MenuForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogoutBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        modifyTechniciansBtn = new javax.swing.JButton();
        modifyBuildingsBtn = new javax.swing.JButton();
        modifyInstallationsBtn = new javax.swing.JButton();
        saveTechBtn = new javax.swing.JButton();
        loadFileBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LogoutBtn.setText("LogOut");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("CQAC Management System");

        modifyTechniciansBtn.setText("Modify Technicians");
        modifyTechniciansBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTechniciansBtnActionPerformed(evt);
            }
        });

        modifyBuildingsBtn.setText("Modify Buildings");
        modifyBuildingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBuildingsBtnActionPerformed(evt);
            }
        });

        modifyInstallationsBtn.setText("Modify Installations");
        modifyInstallationsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyInstallationsBtnActionPerformed(evt);
            }
        });

        saveTechBtn.setText("Save technicians");
        saveTechBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTechBtnActionPerformed(evt);
            }
        });

        loadFileBtn.setText("LoadFile");
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(451, Short.MAX_VALUE)
                        .addComponent(LogoutBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(modifyTechniciansBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saveTechBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(loadFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(modifyBuildingsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(modifyInstallationsBtn)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyTechniciansBtn)
                    .addComponent(modifyBuildingsBtn)
                    .addComponent(modifyInstallationsBtn))
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTechBtn)
                    .addComponent(loadFileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(LogoutBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ModifyTechnician modifyTechnicianForm = new ModifyTechnician();
    ModifyBuilding modifyBuildingForm = new ModifyBuilding();
    ModifyInstallations modifyInstallationsForm = new ModifyInstallations();

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        //creates the loginForm object
        MainForm loginForm = new MainForm();
        //displays the form
        loginForm.setVisible(true);
        //hides this form
        this.setVisible(false);
        //destroys this form
        //this will also distroy the arraylists so if they are not saved then
        //all data is gone
        this.dispose();
        //disposes the other forms
        modifyTechnicianForm.dispose();
        modifyBuildingForm.dispose();
        modifyInstallationsForm.dispose();

    }//GEN-LAST:event_LogoutBtnActionPerformed


    private void modifyTechniciansBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTechniciansBtnActionPerformed
        modifyTechnicianForm.setVisible(true);
        modifyTechnicianForm.main(technicians);
        //This will keep the form alive incase the user leaves data in the data fields
        //the next time the user opens the form it will still have the data entered
        modifyTechnicianForm.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);


    }//GEN-LAST:event_modifyTechniciansBtnActionPerformed

    private void modifyBuildingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBuildingsBtnActionPerformed
        modifyBuildingForm.setVisible(true);
        modifyBuildingForm.main(buildings);
        //This will keep the form alive incase the user leaves data in the data fields
        //the next time the user opens the form it will still have the data entered
        modifyBuildingForm.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_modifyBuildingsBtnActionPerformed


    private void modifyInstallationsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyInstallationsBtnActionPerformed
        modifyInstallationsForm.setVisible(true);
        modifyInstallationsForm.main(buildings, installations, technicians);

    }//GEN-LAST:event_modifyInstallationsBtnActionPerformed

    private void saveTechBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTechBtnActionPerformed
        saveTechniciansText();
    }//GEN-LAST:event_saveTechBtnActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        loadTechniciansText();
    }//GEN-LAST:event_loadFileBtnActionPerformed

    public static void loadAll() {

    }

    public static void saveAll() {

    }

    public static void saveTechniciansText() {
        File file = new File("techniciansdb.dat");
        try {
            FileWriter writer = new FileWriter(file);
            System.out.println("Writing the technicians array to file in clear text");

            String sep = ",";
            int i = 0;
            while (i < technicians.size()) {
                writer.write(technicians.get(i).getFirstName() + sep + technicians.get(i).getLastName()
                        + sep + technicians.get(i).getPhoneNumber() + sep + technicians.get(i).getAge() + sep
                        + technicians.get(i).getNotes() + "\n");
                writer.flush();
                i++;
            }
            writer.close();
        } catch (IOException ex) {
            System.out.println("error cannot write to file");
        }
    }

    public static void loadTechniciansText() {
        File file = new File("techniciansdb.dat");
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            System.out.println("Writing the technicians array to file in clear text");
            String line = reader.readLine();

            while (line != null) {
                System.out.println(line);
                // read next line
                line = reader.readLine();
            }

            System.out.println("Done reading");

            reader.close();
        } catch (IOException ex) {
            System.out.println("error cannot write to file");
        }
    }

    public static void saveInstallationsSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("installationsdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(buildings);

            out.close();
            file.close();
            System.out.println("Written the installations array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle installationsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void saveBuildingsSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("buildingsdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(buildings);

            out.close();
            file.close();
            System.out.println("Written the buildings array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle buildingsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void saveTechniciansSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("techniciansdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(technicians);

            out.close();
            file.close();
            System.out.println("Written the technicians array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle techniciansdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void loadTechniciansSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("techniciansdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            technicians = (ArrayList<Technician>) in.readObject();

            System.out.println("Loaded technician data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle techniciansdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public static void loadBuildingsSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("buildingsdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            buildings = (ArrayList<Building>) in.readObject();

            System.out.println("Loaded building data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle buildingsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public static void loadInstallationsSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("installationsdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            installations = (ArrayList<Installation>) in.readObject();

            System.out.println("Loaded installation data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle installations.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //load the files
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuForm().setVisible(true);
            }
        });

        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loadFileBtn;
    private javax.swing.JButton modifyBuildingsBtn;
    private javax.swing.JButton modifyInstallationsBtn;
    private javax.swing.JButton modifyTechniciansBtn;
    private javax.swing.JButton saveTechBtn;
    // End of variables declaration//GEN-END:variables
}
