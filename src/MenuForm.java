/*
 Created by Caleb Davidson for assignment 2 of Object Oriented Programming
 */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class MenuForm extends javax.swing.JFrame {

    //the 3 arrays which store technicians, buildings, installations
    //Set as static so they can be accessed by other forms with having to pass
    //references
    private static ArrayList<Technician> technicians = new ArrayList<Technician>();
    private static ArrayList<Building> buildings = new ArrayList<Building>();
    private static ArrayList<Installation> installations = new ArrayList<Installation>();

    /**
     * Creates new form MenuForm
     */
    public MenuForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LogoutBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        modifyTechniciansBtn = new javax.swing.JButton();
        modifyBuildingsBtn = new javax.swing.JButton();
        modifyInstallationsBtn = new javax.swing.JButton();
        saveTechBtn = new javax.swing.JButton();
        loadFileBtn = new javax.swing.JButton();
        saveBuildingsBtn = new javax.swing.JButton();
        loadBuildingsBtn = new javax.swing.JButton();
        saveInstallationsBtn = new javax.swing.JButton();
        loadInstallationsBtn = new javax.swing.JButton();
        loadALLBtn = new javax.swing.JButton();
        saveALLBtn = new javax.swing.JButton();
        programManagerBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LogoutBtn.setText("LogOut");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("CQAC Management System");

        modifyTechniciansBtn.setText("Modify Technicians");
        modifyTechniciansBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyTechniciansBtnActionPerformed(evt);
            }
        });

        modifyBuildingsBtn.setText("Modify Buildings");
        modifyBuildingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBuildingsBtnActionPerformed(evt);
            }
        });

        modifyInstallationsBtn.setText("Modify Installations");
        modifyInstallationsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyInstallationsBtnActionPerformed(evt);
            }
        });

        saveTechBtn.setText("Save technicians");
        saveTechBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTechBtnActionPerformed(evt);
            }
        });

        loadFileBtn.setText("LoadFile");
        loadFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileBtnActionPerformed(evt);
            }
        });

        saveBuildingsBtn.setText("Save build");
        saveBuildingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBuildingsBtnActionPerformed(evt);
            }
        });

        loadBuildingsBtn.setText("load");
        loadBuildingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBuildingsBtnActionPerformed(evt);
            }
        });

        saveInstallationsBtn.setText("Save Install");
        saveInstallationsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInstallationsBtnActionPerformed(evt);
            }
        });

        loadInstallationsBtn.setText("Load Instal");
        loadInstallationsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInstallationsBtnActionPerformed(evt);
            }
        });

        loadALLBtn.setText("Load ALL");
        loadALLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadALLBtnActionPerformed(evt);
            }
        });

        saveALLBtn.setText("Save ALL");
        saveALLBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveALLBtnActionPerformed(evt);
            }
        });

        programManagerBtn.setText("Program Manager");
        programManagerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                programManagerBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(451, Short.MAX_VALUE)
                        .addComponent(LogoutBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(modifyTechniciansBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modifyBuildingsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(modifyInstallationsBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(saveInstallationsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveBuildingsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveTechBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(saveALLBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(loadInstallationsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(loadFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(loadBuildingsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(loadALLBtn, javax.swing.GroupLayout.Alignment.TRAILING)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(programManagerBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(programManagerBtn))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyTechniciansBtn)
                    .addComponent(modifyBuildingsBtn)
                    .addComponent(modifyInstallationsBtn))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadALLBtn)
                    .addComponent(saveALLBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTechBtn)
                    .addComponent(loadFileBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBuildingsBtn)
                    .addComponent(loadBuildingsBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(LogoutBtn)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveInstallationsBtn)
                            .addComponent(loadInstallationsBtn))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ModifyTechnician modifyTechnicianForm = new ModifyTechnician();
    ModifyBuilding modifyBuildingForm = new ModifyBuilding();
    ModifyInstallations modifyInstallationsForm = new ModifyInstallations();

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        //creates the loginForm object
        MainForm loginForm = new MainForm();
        //displays the form
        loginForm.setVisible(true);
        //hides this form
        this.setVisible(false);
        //destroys this form
        //this will also distroy the arraylists so if they are not saved then
        //all data is gone
        this.dispose();
        //disposes the other forms
        modifyTechnicianForm.dispose();
        modifyBuildingForm.dispose();
        modifyInstallationsForm.dispose();

    }//GEN-LAST:event_LogoutBtnActionPerformed


    private void modifyTechniciansBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyTechniciansBtnActionPerformed
        modifyTechnicianForm.setVisible(true);
        modifyTechnicianForm.main(technicians);
        //This will keep the form alive incase the user leaves data in the data fields
        //the next time the user opens the form it will still have the data entered
        modifyTechnicianForm.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);


    }//GEN-LAST:event_modifyTechniciansBtnActionPerformed

    private void modifyBuildingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBuildingsBtnActionPerformed
        modifyBuildingForm.setVisible(true);
        modifyBuildingForm.main(buildings);
        //This will keep the form alive incase the user leaves data in the data fields
        //the next time the user opens the form it will still have the data entered
        modifyBuildingForm.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }//GEN-LAST:event_modifyBuildingsBtnActionPerformed


    private void modifyInstallationsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyInstallationsBtnActionPerformed
        modifyInstallationsForm.setVisible(true);
        modifyInstallationsForm.main(buildings, installations, technicians);

    }//GEN-LAST:event_modifyInstallationsBtnActionPerformed

    private void saveTechBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTechBtnActionPerformed
        saveTechniciansText();
    }//GEN-LAST:event_saveTechBtnActionPerformed

    private void loadFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileBtnActionPerformed
        loadTechniciansText();
    }//GEN-LAST:event_loadFileBtnActionPerformed

    private void saveBuildingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBuildingsBtnActionPerformed
        saveBuildingsText();
    }//GEN-LAST:event_saveBuildingsBtnActionPerformed

    private void loadBuildingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBuildingsBtnActionPerformed
        loadBuildingsText();
    }//GEN-LAST:event_loadBuildingsBtnActionPerformed

    private void saveInstallationsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInstallationsBtnActionPerformed
        saveInstallationsText();
    }//GEN-LAST:event_saveInstallationsBtnActionPerformed

    private void loadInstallationsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadInstallationsBtnActionPerformed
        loadInstallationsText();
    }//GEN-LAST:event_loadInstallationsBtnActionPerformed

    private void saveALLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveALLBtnActionPerformed
        saveAll();
    }//GEN-LAST:event_saveALLBtnActionPerformed

    private void loadALLBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadALLBtnActionPerformed
        loadAll();
    }//GEN-LAST:event_loadALLBtnActionPerformed

    private void programManagerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_programManagerBtnActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        //Saves the result of the dialog in a variable
        int dialogResult = JOptionPane.showConfirmDialog(null, "This is for administrators and debuging only continue?", "Continue?", dialogButton);
        //if yes was clicked
        if (dialogResult == JOptionPane.YES_OPTION) {
            System.out.println("Yes was clicked starting");
            ProgramManagerForm form = new ProgramManagerForm();
            form.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            form.setVisible(true);
        } else {
            System.out.println("The dialog was closed or no was selected. NOT starting.");

        }
    }//GEN-LAST:event_programManagerBtnActionPerformed

    private static Technician searchTechnicians(String FirstName, String LastName) {
        int i = 0;
        System.out.println("Technician Searching:  " + FirstName + " " + LastName);

        while (i < technicians.size()) {
            if (technicians.get(i).getFirstName().compareTo(FirstName) == 0 && technicians.get(i).getLastName().compareTo(LastName) == 0) {
                System.out.println("MATCHES: " + i + " " + technicians.get(i).getFirstName() + " " + technicians.get(i).getLastName());
                return technicians.get(i);
            }

            System.out.println(FirstName + "" + LastName + " Doesn't match: " + technicians.get(i).getFirstName() + " " + technicians.get(i).getLastName());
            i++;
        }
        //return null if it fails to find anything
        return null;

    }

    private static Building searchBuildings(String Address) {
        int i = 0;
        System.out.println("Building Search: Searching for: " + Address);
        while (i < buildings.size()) {
            if (buildings.get(i).getAddress().compareTo(Address) == 0) {
                System.out.println("MATCHES: " + i + " " + buildings.get(i).getAddress());

                return buildings.get(i);

            }

            System.out.println("Searching: " + i + " " + buildings.get(i).getAddress());
            i++;
        }
        System.out.println("Building net found!");
        //return null if it fails to find anything
        return null;
    }

    public static void loadAll() {
        loadTechniciansText();
        loadBuildingsText();
        loadInstallationsText();
    }

    public static void saveAll() {
        saveTechniciansText();
        saveBuildingsText();
        saveInstallationsText();
    }

    public static void loadInstallationsText() {
        //creates a new file object
        File file = new File("installationsdb.dat");
        //checks if the file exists
        //if it exists continue else dont bother trying to load the data
        if (file.exists()) {
            try {
                //creating a befferreader for the file
                BufferedReader reader = new BufferedReader(new FileReader(file));
                System.out.println("Loading the installations file to array in clear text");
                //storing the data of the current line into a string
                String line = reader.readLine();
                //ckear the technicians arraylist
                installations.clear();
                //while not at the end of the file
                while (line != null) {
                    System.out.println(line);

                    //splits the string into an array of strings
                    String[] parts = line.split(",", -1);
                    //if the array doesnt match the correct length for a installations object
                    //error and disreguard the current line
                    line = reader.readLine();
                    if (parts.length == 8) {

                        Technician technician = searchTechnicians(parts[3], parts[4]);
                        Building building = searchBuildings(parts[5]);

                        if (technician == null && building == null) {
                            JOptionPane.showMessageDialog(null, "ERROR: Technician and Building not found", "Error", JOptionPane.ERROR_MESSAGE);
                        } else if (technician == null) {
                            JOptionPane.showMessageDialog(null, "ERROR: Technician not found", "Error", JOptionPane.ERROR_MESSAGE);

                        } else if (building == null) {
                            JOptionPane.showMessageDialog(null, "ERROR: Building not found", "Error", JOptionPane.ERROR_MESSAGE);

                        } else {
                            int i = 0;
                            while (i < parts.length) {
                                System.out.println(parts[i]);
                                i++;
                            }

                            System.out.println("Addeding: " + "\n" + technician.getFirstName() + "\n" + building.getAddress() + "\n" + parts[0] + "\n" + parts[1] + "\n" + parts[2] + "\n" + parts[6] + "\n" + parts[7]);
                            installations.add(new Installation(technician, building, Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2]), parts[6], parts[7]));

                        }

                    } else {

                        System.out.println("Error corrupted data detected.");
                        JOptionPane.showMessageDialog(null, "ERROR: Corrupted data detected", "Error", JOptionPane.ERROR_MESSAGE);

                    }
                }

                System.out.println("Done reading");

                //close the reader
                reader.close();

            } catch (IOException ex) {
                System.out.println("error cannot write to file");
            }
        } else {
            System.out.println("File doesnt exist skipping load method");
        }
    }

    public static void saveInstallationsText() {
        File file = new File("installationsdb.dat");
        try {
            FileWriter writer = new FileWriter(file);
            System.out.println("Writing the installations array to file in clear text");

            String sep = ",";
            int i = 0;
            while (i < installations.size()) {
                writer.write(installations.get(i).getHorsePower() + sep + installations.get(i).getNumZones()
                        + sep + installations.get(i).getOutlets() + sep + installations.get(i).getTechnician().getFirstName() + sep + installations.get(i).getTechnician().getLastName()
                        + sep + installations.get(i).getBuilding().getAddress() + sep + installations.get(i).getStartDate() + sep + installations.get(i).getEnddate() + "\n");
                writer.flush();
                i++;
            }
            writer.close();
        } catch (IOException ex) {
            System.out.println("error cannot write to file");
        }
    }

    public static void loadBuildingsText() {
        //creates a new file object
        File file = new File("buildingsdb.dat");
        //checks if the file exists
        //if it exists continue else dont bother trying to load the data
        if (file.exists()) {
            try {
                //creating a befferreader for the file
                BufferedReader reader = new BufferedReader(new FileReader(file));
                System.out.println("Loading the buildings file to array in clear text");
                //storing the data of the current line into a string
                String line = reader.readLine();
                //ckear the technicians arraylist
                buildings.clear();
                //while not at the end of the file
                while (line != null) {
                    System.out.println(line);

                    //splits the string into an array of strings
                    String[] parts = line.split(",", -1);
                    //if the array doesnt match the correct length for a technician object
                    //error and disreguard the current line
                    line = reader.readLine();
                    //if the number of parts is 10 then it is not a highrise
                    if (parts.length == 10) {

                        System.out.println("Addeding: " + "\n" + parts[0] + "\n" + parts[1] + "\n" + parts[2] + "\n" + parts[3] + "\n" + parts[4] + "\n" + parts[5] + "\n" + parts[6]
                                + "\n" + parts[7] + "\n" + parts[8] + "\n" + parts[9]);
                        //add a normal building
                        buildings.add(new Building(Integer.parseInt(parts[0]), parts[1], Integer.parseInt(parts[2]), parts[3], parts[4], parts[5], parts[6], Integer.parseInt(parts[7]), parts[8],
                                parts[9]));
                        //if the number of parts is 11 then its a highrise
                    } else if (parts.length == 11) {
                        System.out.println("This entry is a highrise");
                        //add a new highrise
                        buildings.add(new Highrise());
                        //cast the current object in the arraylist into a highrise
                        Highrise d = new Highrise();
                        //add all the data to the highrise object                      
                        d = (Highrise) buildings.get(buildings.size() - 1);
                        d.setUnitNumber(Integer.parseInt(parts[0]));
                        d.setAddress(parts[1]);
                        d.setPostCode(Integer.parseInt(parts[2]));
                        d.setSuburb(parts[3]);
                        d.setCity(parts[4]);
                        d.setState(parts[5]);
                        d.setBuildingName(parts[6]);
                        d.setRooms(Integer.parseInt(parts[7]));
                        d.setNotes(parts[8]);
                        d.setBuildingType(parts[9]);
                        d.setNumOfFloors(Integer.parseInt(parts[10]));

                    } else {

                        System.out.println("Error corrupted data detected.");
                        JOptionPane.showMessageDialog(null, "ERROR: Corrupted data detected", "Error", JOptionPane.ERROR_MESSAGE);

                    }
                }

                System.out.println("Done reading");
                System.out.println("array size: " + technicians.size());
                //close the reader
                reader.close();

            } catch (IOException ex) {
                System.out.println("error cannot write to file");
            }
        } else {
            System.out.println("File doesnt exist skipping load method");
        }
    }

    public static void saveBuildingsText() {
        File file = new File("buildingsdb.dat");
        try {
            FileWriter writer = new FileWriter(file);
            System.out.println("Writing the buildings array to file in clear text");

            String sep = ",";
            int i = 0;
            while (i < buildings.size()) {

                //check if the building is a highrise
                if (buildings.get(i) instanceof Highrise) {
                    //debug print
                    System.out.println("Index:" + (buildings.size() - 1) + "is a highrise");
                    //create a highrise object
                    Highrise d = new Highrise();
                    //cast the current object in the arraylist into a highrise
                    d = (Highrise) buildings.get(i);
//write out all the data                                        
                    writer.write(buildings.get(i).getUnitNumber() + sep + buildings.get(i).getAddress()
                            + sep + buildings.get(i).getPostCode() + sep + buildings.get(i).getSuburb() + sep
                            + buildings.get(i).getCity() + sep + buildings.get(i).getState() + sep + buildings.get(i).getBuildingName() + sep + buildings.get(i).getRooms()
                            + sep + buildings.get(i).getNotes() + sep + buildings.get(i).getBuildingType() + sep + d.getNumOfFloors() + "\n");
                } else {
                    //write a normal building to file
                    writer.write(buildings.get(i).getUnitNumber() + sep + buildings.get(i).getAddress()
                            + sep + buildings.get(i).getPostCode() + sep + buildings.get(i).getSuburb() + sep
                            + buildings.get(i).getCity() + sep + buildings.get(i).getState() + sep + buildings.get(i).getBuildingName() + sep + buildings.get(i).getRooms()
                            + sep + buildings.get(i).getNotes() + sep + buildings.get(i).getBuildingType() + "\n");
                }

                writer.flush();
                i++;
            }
            writer.close();
        } catch (IOException ex) {
            System.out.println("error cannot write to file");
        }
    }

    // these methods are made public and static to avoid having to duplicate the methods into each form
    public static void saveTechniciansText() {
        File file = new File("techniciansdb.dat");
        try {
            FileWriter writer = new FileWriter(file);
            System.out.println("Writing the technicians array to file in clear text");

            String sep = ",";
            int i = 0;
            while (i < technicians.size()) {
                writer.write(technicians.get(i).getFirstName() + sep + technicians.get(i).getLastName()
                        + sep + technicians.get(i).getPhoneNumber() + sep + technicians.get(i).getAge() + sep
                        + technicians.get(i).getNotes() + "\n");
                writer.flush();
                i++;
            }
            writer.close();
        } catch (IOException ex) {
            System.out.println("error cannot write to file");
        }
    }

    public static void loadTechniciansText() {
        //creates a new file object
        File file = new File("techniciansdb.dat");
        //checks if the file exists
        //if it exists continue else dont bother trying to load the data
        if (file.exists()) {
            try {
                //creating a befferreader for the file
                BufferedReader reader = new BufferedReader(new FileReader(file));
                System.out.println("Loading the technicians file to array in clear text");
                //storing the data of the current line into a string
                String line = reader.readLine();
                //ckear the technicians arraylist
                technicians.clear();
                //while not at the end of the file
                while (line != null) {
                    System.out.println(line);

                    //splits the string into an array of strings
                    String[] parts = line.split(",", -1);
                    //if the array doesnt match the correct length for a technician object
                    //error and disreguard the current line
                    line = reader.readLine();
                    if (parts.length == 5) {

                        System.out.println("Addeding: " + "\n" + parts[0] + "\n" + parts[1] + "\n" + parts[2] + "\n" + parts[3] + "\n" + parts[4]);
                        technicians.add(new Technician(parts[0], parts[1], parts[2], Integer.parseInt(parts[3]), parts[4]));

                    } else {

                        System.out.println("Error corrupted data detected.");
                        JOptionPane.showMessageDialog(null, "ERROR: Corrupted data detected", "Error", JOptionPane.ERROR_MESSAGE);

                    }
                }

                System.out.println("Done reading");
                System.out.println("array size: " + technicians.size());
                //close the reader
                reader.close();

            } catch (IOException ex) {
                System.out.println("error cannot write to file");
            }
        } else {
            System.out.println("File doesnt exist skipping load method");
        }
    }

    public static void saveInstallationsSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("installationsdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(buildings);

            out.close();
            file.close();
            System.out.println("Written the installations array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle installationsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void saveBuildingsSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("buildingsdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(buildings);

            out.close();
            file.close();
            System.out.println("Written the buildings array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle buildingsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void saveTechniciansSerialize() {
        try {
            FileOutputStream file = new FileOutputStream("techniciansdb.dat");
            PrintWriter out = new PrintWriter(file);

            //craft a string line then write
            out.println(technicians);

            out.close();
            file.close();
            System.out.println("Written the technicians array to file.");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle techniciansdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }

    public static void loadTechniciansSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("techniciansdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            technicians = (ArrayList<Technician>) in.readObject();

            System.out.println("Loaded technician data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle techniciansdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public static void loadBuildingsSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("buildingsdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            buildings = (ArrayList<Building>) in.readObject();

            System.out.println("Loaded building data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle buildingsdb.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public static void loadInstallationsSerialize() {
        FileInputStream file = null;
        try {
            file = new FileInputStream("installationsdb.dat");
            ObjectInputStream in = new ObjectInputStream(file);

            installations = (ArrayList<Installation>) in.readObject();

            System.out.println("Loaded installation data from file");

        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: FIle installations.dat not found. \n Should have been handled", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Unable to write to file", "Error", JOptionPane.ERROR_MESSAGE);

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ERROR: Object not found", "Error", JOptionPane.ERROR_MESSAGE);

        } finally {
            try {
                file.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "ERROR: Could not close file", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //load the files
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuForm().setVisible(true);
            }
        });

        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loadALLBtn;
    private javax.swing.JButton loadBuildingsBtn;
    private javax.swing.JButton loadFileBtn;
    private javax.swing.JButton loadInstallationsBtn;
    private javax.swing.JButton modifyBuildingsBtn;
    private javax.swing.JButton modifyInstallationsBtn;
    private javax.swing.JButton modifyTechniciansBtn;
    private javax.swing.JButton programManagerBtn;
    private javax.swing.JButton saveALLBtn;
    private javax.swing.JButton saveBuildingsBtn;
    private javax.swing.JButton saveInstallationsBtn;
    private javax.swing.JButton saveTechBtn;
    // End of variables declaration//GEN-END:variables
}
