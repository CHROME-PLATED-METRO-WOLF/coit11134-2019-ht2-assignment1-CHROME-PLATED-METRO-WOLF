/*
 Created by Caleb Davidson for assignment 2 of Object Oriented Programming
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Objects;
import javax.swing.AbstractListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;

public class ModifyBuilding extends javax.swing.JFrame {

    private ArrayList<Building> buildings = new ArrayList<Building>();

    /**
     * Creates new form ModifyTechnician
     */
    public ModifyBuilding() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jList1 = new JList<>();
        jLabel1 = new JLabel();
        addBtn = new JToggleButton();
        jScrollPane2 = new JScrollPane();
        technicianViewBox = new JTable();
        unitNumberField = new JTextField();
        addressField = new JTextField();
        postCodeField = new JTextField();
        suburbField = new JTextField();
        cityField = new JTextField();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        editSelectedBtn = new JButton();
        updateSelectedBtn = new JButton();
        removeSelectedBtn = new JButton();
        jLabel7 = new JLabel();
        stateField = new JTextField();
        buildingNameField = new JTextField();
        jLabel8 = new JLabel();
        jLabel9 = new JLabel();
        roomsField = new JTextField();
        notesField = new JTextField();
        jLabel10 = new JLabel();
        highRiseCheck = new JCheckBox();
        numOfFloorsField = new JTextField();
        jLabel11 = new JLabel();
        buildingTypeField = new JTextField();
        jLabel12 = new JLabel();

        jList1.setModel(new AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Building Manager");

        addBtn.setText("Add");
        addBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        technicianViewBox.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Unit #", "Address", "Post Code", "Suburb", "City", "State", "Building Name", "Rooms", "Notes", "Building Type", "Num Floors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicianViewBox.setEditingColumn(1);
        technicianViewBox.setEditingRow(1);
        jScrollPane2.setViewportView(technicianViewBox);

        jLabel2.setText("Unit Number");

        jLabel3.setText("Address");

        jLabel4.setText("Post Code");

        jLabel5.setText("Suburb");

        jLabel6.setText("City");

        editSelectedBtn.setText("Edit Selected");
        editSelectedBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editSelectedBtnActionPerformed(evt);
            }
        });

        updateSelectedBtn.setText("Update Selected");
        updateSelectedBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateSelectedBtnActionPerformed(evt);
            }
        });

        removeSelectedBtn.setText("Remove Selected");
        removeSelectedBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                removeSelectedBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("State");

        jLabel8.setText("buildingName");

        jLabel9.setText("rooms");

        jLabel10.setText("notes");

        highRiseCheck.setText("Highrise Building");
        highRiseCheck.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                highRiseCheckStateChanged(evt);
            }
        });
        highRiseCheck.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                highRiseCheckActionPerformed(evt);
            }
        });

        numOfFloorsField.setEnabled(false);

        jLabel11.setText("Building Type");

        jLabel12.setText("# of Floors");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(unitNumberField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addressField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(postCodeField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(suburbField, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityField, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(roomsField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(buildingTypeField, GroupLayout.Alignment.LEADING)
                                        .addComponent(notesField, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(stateField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(buildingNameField, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numOfFloorsField, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addComponent(highRiseCheck))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(addBtn, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(editSelectedBtn)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateSelectedBtn)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(removeSelectedBtn)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(jLabel1)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(unitNumberField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(addressField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(postCodeField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(suburbField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cityField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(stateField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(highRiseCheck))
                            .addComponent(jLabel7))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(buildingNameField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12)
                            .addComponent(numOfFloorsField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(roomsField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(notesField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(buildingTypeField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(editSelectedBtn)
                    .addComponent(updateSelectedBtn)
                    .addComponent(removeSelectedBtn))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //If unitNumber is blank than change to 0
        if (unitNumberField.getText().equals("")) {
            System.out.println("Changing unitNumber to 0");
            unitNumberField.setText("0");
        }

        //if address is blank then throw error
        if (addressField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "ERROR: Please enter at least a address", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            //If suburb field is blank set 
            if (suburbField.getText().equals("")) {
                suburbField.setText(Integer.toString(0));

            }
            //If postcode is blank set it to default value of 0
            if (postCodeField.getText().equals("")) {
                postCodeField.setText("0");
            }
            //if roomsfield is blank set to default value of 0
            if (roomsField.getText().equals("")) {
                roomsField.setText("0");
            }
            //if highrise is checked then run this method
            if (highRiseCheck.isSelected()) {
                //creates a new highrise if selected
                buildings.add(new Highrise());
            } else {
                //if highrise isnt selected then create a building
                buildings.add(new Building());
            }
            try {
                //add relevent details from the gui components to the object
                buildings.get(buildings.size() - 1).setSuburb((suburbField.getText()));
                buildings.get(buildings.size() - 1).setUnitNumber(Integer.parseInt(unitNumberField.getText()));
                buildings.get(buildings.size() - 1).setAddress(addressField.getText());
                buildings.get(buildings.size() - 1).setPostCode(Integer.parseInt(postCodeField.getText()));
                buildings.get(buildings.size() - 1).setCity(cityField.getText());
                buildings.get(buildings.size() - 1).setState(stateField.getText());
                buildings.get(buildings.size() - 1).setBuildingName(buildingNameField.getText());
                buildings.get(buildings.size() - 1).setRooms(Integer.parseInt(roomsField.getText()));
                buildings.get(buildings.size() - 1).setNotes(notesField.getText());
                buildings.get(buildings.size() - 1).setBuildingType(buildingTypeField.getText());

                //if the current selected object is a highrise then add number of floors
                if (buildings.get(buildings.size() - 1) instanceof Highrise) {
                    //debug print
                    System.out.println("Index:" + (buildings.size() - 1) + "is a highrise");
                    //create a highrise object
                    Highrise d = new Highrise();
                    //cast the current object in the arraylist into a highrise
                    d = (Highrise) buildings.get(buildings.size() - 1);
                    //set the number of floors for the current object
                    d.setNumOfFloors(Integer.parseInt(numOfFloorsField.getText()));

                }
                //if numbers are not entered into the correct fields
            } catch (java.lang.NumberFormatException exception) {
                JOptionPane.showMessageDialog(null, "ERROR: Please enter a number for Unit Number, Post Code and Number of Rooms", "Error", JOptionPane.ERROR_MESSAGE);
                //remove the last one since it errors
                buildings.remove(buildings.size() - 1);
            }
        }
        //run the update table method


    }//GEN-LAST:event_addBtnActionPerformed

    private void editSelectedBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editSelectedBtnActionPerformed
        try {
            //store current selected row
            int selectedRow = technicianViewBox.getSelectedRow();
            //if the current item in the arraylist is a highrise then
            if (buildings.get(selectedRow) instanceof Highrise) {
                //check the highrise checkbox
                highRiseCheck.setSelected(true);
                //casting highrise again
                Highrise d = new Highrise();
                d = (Highrise) buildings.get(selectedRow);
                //set gui component to the number of floors value
                numOfFloorsField.setText(Integer.toString(d.getNumOfFloors()));
            }
            //setting the rest of the gui components
            suburbField.setText(buildings.get(selectedRow).getSuburb());
            unitNumberField.setText(Integer.toString(buildings.get(selectedRow).getUnitNumber()));
            addressField.setText(buildings.get(selectedRow).getAddress());
            postCodeField.setText(Integer.toString(buildings.get(selectedRow).getPostCode()));
            cityField.setText(buildings.get(selectedRow).getCity());
            stateField.setText(buildings.get(selectedRow).getState());
            buildingNameField.setText(buildings.get(selectedRow).getBuildingName());
            roomsField.setText(Integer.toString(buildings.get(selectedRow).getRooms()));
            notesField.setText(buildings.get(selectedRow).getNotes());
            buildingTypeField.setText(buildings.get(selectedRow).getBuildingType());
            //if nothing is selected
        } catch (java.lang.IndexOutOfBoundsException exception) {
            JOptionPane.showMessageDialog(null, "ERROR: Nothing is selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editSelectedBtnActionPerformed
    //update selected item button
    private void updateSelectedBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_updateSelectedBtnActionPerformed
        try {
            //selected row
            int selectedRow = technicianViewBox.getSelectedRow();
            //you must enter a address
            if (addressField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "ERROR: Please enter at least a address", "Error", JOptionPane.ERROR_MESSAGE);

            } else {
                //checking and setting default values for fields that need to be numbers
                if (suburbField.getText().equals("")) {
                    suburbField.setText("0");

                }
                if (postCodeField.getText().equals("")) {
                    postCodeField.setText("0");
                }
                if (roomsField.getText().equals("")) {
                    roomsField.setText("0");
                }

                try {
                    //setting selected objects variables to the ones entered into the gui components
                    buildings.get(selectedRow).setSuburb((suburbField.getText()));
                    buildings.get(selectedRow).setUnitNumber(Integer.parseInt(unitNumberField.getText()));
                    buildings.get(selectedRow).setAddress(addressField.getText());
                    buildings.get(selectedRow).setPostCode(Integer.parseInt(postCodeField.getText()));
                    buildings.get(selectedRow).setCity(cityField.getText());
                    buildings.get(selectedRow).setState(stateField.getText());
                    buildings.get(selectedRow).setBuildingName(buildingNameField.getText());
                    buildings.get(selectedRow).setRooms(Integer.parseInt(roomsField.getText()));
                    buildings.get(selectedRow).setNotes(notesField.getText());
                    buildings.get(selectedRow).setBuildingType(buildingTypeField.getText());

                    //if the currently selected object is a highrise
                    if (buildings.get(selectedRow) instanceof Highrise) {
                        //casting so we can access the number of floors variable
                        Highrise d = new Highrise();
                        d = (Highrise) buildings.get(selectedRow);

                        d.setNumOfFloors(Integer.parseInt(numOfFloorsField.getText()));
                    }
                    //if you enter non numbers into number only fields
                } catch (java.lang.NumberFormatException exception) {
                    String message;
                    //depending if the item is a highrise or just a building display a different
                    //error
                    if (buildings.get(selectedRow) instanceof Highrise) {
                        message = "ERROR: Please enter a number for Unit Number, Post Code, Number of Rooms and Number of Floors";
                    } else {
                        message = "ERROR: Please enter a number for Unit Number, Post Code and Number of Rooms";
                    }
                    JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);

                }
            }
            //if nothing is selected
        } catch (java.lang.IndexOutOfBoundsException exception) {
            JOptionPane.showMessageDialog(null, "ERROR: Nothing is selected", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_updateSelectedBtnActionPerformed

    //removes the currently selected item form the arraylist
    private void removeSelectedBtnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_removeSelectedBtnActionPerformed
        try {
            int selectedRow = technicianViewBox.getSelectedRow();
            buildings.remove(selectedRow);
        } catch (java.lang.IndexOutOfBoundsException exception) {
            JOptionPane.showMessageDialog(null, "ERROR: Nothing is selected", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_removeSelectedBtnActionPerformed

    private void highRiseCheckActionPerformed(ActionEvent evt) {//GEN-FIRST:event_highRiseCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_highRiseCheckActionPerformed

    //triggers if the checkbox is ticked or not
    private void highRiseCheckStateChanged(ChangeEvent evt) {//GEN-FIRST:event_highRiseCheckStateChanged
        //enables the number of floors field depending on the status of the tick box
        if (highRiseCheck.isSelected()) {
            numOfFloorsField.setEnabled(true);
        } else {
            numOfFloorsField.setEnabled(false);
        }
    }//GEN-LAST:event_highRiseCheckStateChanged

    private void UpdateTable() {
        System.out.println("Running UpdateTable");
        clearRows();
        int i = 0;
        //loop through building array
        while (i < buildings.size()) {
            //if the current item is a highrise
            if (buildings.get(i) instanceof Highrise) {
                //casting the highrise again
                Highrise d = new Highrise();
                d = (Highrise) buildings.get(i);
                //adding a row with the number of floors value
                AddRow(Integer.toString(buildings.get(i).getUnitNumber()), buildings.get(i).getAddress(),
                        Integer.toString(buildings.get(i).getPostCode()), buildings.get(i).getSuburb(),
                        buildings.get(i).getCity(), buildings.get(i).getState(), buildings.get(i).getBuildingName(),
                        Integer.toString(buildings.get(i).getRooms()), buildings.get(i).getNotes(), buildings.get(i).getBuildingType(), Integer.toString(d.getNumOfFloors()));

            } else {
                //run the normal addrow without the num of floors variables
                AddRow(Integer.toString(buildings.get(i).getUnitNumber()), buildings.get(i).getAddress(),
                        Integer.toString(buildings.get(i).getPostCode()), buildings.get(i).getSuburb(),
                        buildings.get(i).getCity(), buildings.get(i).getState(), buildings.get(i).getBuildingName(),
                        Integer.toString(buildings.get(i).getRooms()), buildings.get(i).getNotes(), buildings.get(i).getBuildingType());
            }
            i++;
        }
    }

    //removes a specific row
    private void RemoveRows(int index) {
        DefaultTableModel yourModel = (DefaultTableModel) technicianViewBox.getModel();
        yourModel.removeRow(index);
    }

    //add row for normal buildings
    private void AddRow(String unitNumber, String address, String postCode, String suburb, String city, String state, String buildingName, String numRooms, String notes,
            String buildingType) {
        DefaultTableModel yourModel = (DefaultTableModel) technicianViewBox.getModel();
        yourModel.addRow(new Object[]{unitNumber, address, postCode, suburb, city, state, buildingName, numRooms, notes, buildingType});
    }

    //add row for highrises
    private void AddRow(String unitNumber, String address, String postCode, String suburb, String city, String state, String buildingName, String numRooms, String notes,
            String buildingType, String numFloors) {
        DefaultTableModel yourModel = (DefaultTableModel) technicianViewBox.getModel();
        yourModel.addRow(new Object[]{unitNumber, address, postCode, suburb, city, state, buildingName, numRooms, notes, buildingType, numFloors});
    }

    //clear all rows
    private void clearRows() {
        DefaultTableModel Model = (DefaultTableModel) technicianViewBox.getModel();
        Model.setRowCount(0);
    }

    public Thread watchDogThread;

    /**
     * @param args the command line arguments
     */
    public Thread getThread(String threadName) {
        //gets the curent thred (gui thread)
        Thread currentThread = Thread.currentThread();
        //gets the group the gui belongs to which should be the main group
        ThreadGroup threadGroup = getRootThreadGroup(currentThread);
        //gets number of active threads
        int allActiveThreads = threadGroup.activeCount();
        //creats an array of all the threads in the thread group
        Thread[] allThreads = new Thread[allActiveThreads];
        //enumerate through all thread groups and add the threads to the list
        threadGroup.enumerate(allThreads);
//loop through this list
        for (int i = 0; i < allThreads.length; i++) {
            //if the threads name matches then
            if (allThreads[i].getName().equals(threadName)) {
                System.out.println("Thread found");
                //return that thread
                return allThreads[i];
            }
        }
        System.out.println("Thread not found");
        //if thread is not found return null
        return null;
    }

    private static ThreadGroup getRootThreadGroup(Thread thread) {
        ThreadGroup rootGroup = thread.getThreadGroup();
        while (true) {
            ThreadGroup parentGroup = rootGroup.getParent();
            if (parentGroup == null) {
                break;
            }
            rootGroup = parentGroup;
        }
        return rootGroup;
    }

    public void main(ArrayList<Building> buildingsList) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyTechnician.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyTechnician.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyTechnician.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyTechnician.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        buildings = buildingsList;

// create a new watchdog object
        WatchDog object = new WatchDog();
        //check if a thread is allready running for the watch dog object
        //This was so difficult to figure out took me ages
        if (watchDogThread == null && getThread("Building Watch Dog") == null) {
            System.out.println("Starting watchdog");
            //Making sure the thread exis when the class is destroyed (form is destroyed)
            //otherwise JVM will never exit and error will occure when the program is closed
            object.setDaemon(false);
            //setting its name
            object.setName("Building Watch Dog");

            //start the thread
            object.start();

        } else {
            System.out.println("Watchdog is running");

        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JToggleButton addBtn;
    private JTextField addressField;
    private JTextField buildingNameField;
    private JTextField buildingTypeField;
    private JTextField cityField;
    private JButton editSelectedBtn;
    private JCheckBox highRiseCheck;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JList<String> jList1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextField notesField;
    private JTextField numOfFloorsField;
    private JTextField postCodeField;
    private JButton removeSelectedBtn;
    private JTextField roomsField;
    private JTextField stateField;
    private JTextField suburbField;
    private JTable technicianViewBox;
    private JTextField unitNumberField;
    private JButton updateSelectedBtn;
    // End of variables declaration//GEN-END:variables

    //Using a threaded watchdog is better than hard coding update code into every part of the program that "might" make a change to the array.
    //This way no matter what happens to the array it will update it if it is changed. It will even update if a external memory modification program 
    //such as cheat enine is used to manually change a value and yes i tested that. However if an external program force the value type to change to something
    //other than what it is for example an int to a string weird behavour can happen. Thanks to c++ i forced the number of floors value in the array to a single byte.
    //the variable allready had a number larger than a byte, when it was changed it overwrote one of the other variables in the object. I tried setting the origonal 
    //variable to a long and using the max value possible and forceing the variable to a single byte and it crashed the program with no stack trace JVM just crashed
    //maybe this was some kind of buffer overflow :)
    class WatchDog extends Thread {

        //run method which is called when the thread is started
        public void run() {
            try {
                // Displaying the thread that is running 
                // prints out the thread status
                System.out.println("Building array watch dog is running on thread:  " + Thread.currentThread().getId());
                //set the thread number so we can check its status elsewhere
                watchDogThread = Thread.currentThread();
                //get the current (first) hash code of the array and all of its objects
                int currentHash = buildings.hashCode();
                //Control loop will keep checking if any objects are changed inside the array and if any change
                //then it will run UpdateTable() to update the table
                while (true) {
                    //sleep for 400ms so it doesnt consume too much cpu time (so it doesnt 100% cpu all the time)
                    sleep(400);
                    //calculate a new hash code
                    int newHash = buildings.hashCode();
                    //compare if it is different to the old hash code
                    if (currentHash != newHash) {
                        //set the old hash to the new one (to avoid looping updateTable()
                        currentHash = newHash;
                        //update the table
                        UpdateTable();
                    }
                    System.out.println(Thread.currentThread().getId());
                }
                //Catch all exceptions
            } catch (Exception e) {

                System.out.println("Buildings array watchdog has just crashed");
            }
        }
    }

}
